# Copyright The Linux Foundation and each contributor to LFX.
# SPDX-License-Identifier: MIT
---
# LFX global values
lfx:
  # Domain configuration
  domain: k8s.orb.local

  # Common image settings
  image:
    registry: linuxfoundation
    pullPolicy: IfNotPresent

  generateHeimdallBundle:
    enabled: false
    name: heimdall-trust-bundle
    configKey: ca-certificates.crt

  whoami:
    enabled: true

  swagger_ui:
    enabled: true
    image: swaggerapi/swagger-ui
    tag: latest
    merger:
      image: node
      tag: 24-alpine
    auth:
      enabled: true
      domain: "https://auth.k8s.orb.local"
      authorizationUrl: "https://auth.k8s.orb.local/api/oidc/authorization"
      clientId: "docs"
    server: "http://lfx-api.k8s.orb.local"
    specs:
      - "_projects/openapi3.yaml"
      - "_query/openapi3.yaml"

  # Tells rulesets to use the oidc_contextualizer, needed for
  # local dev with authelia
  use_oidc_contextualizer: true

  # Fallback gateway can be enabled if traefik.enabled is false.
  parentGateway:
    enabled: false
    name: traefik
    sectionName: websecure
    namespace: default

fga-operator:
  enabled: true
  # Non-chart value
  store: "lfx-core"
  controllerManager:
    openFgaUrlEnvVar: 'http://lfx-platform-openfga:8080'
    # This value needs to be set in order for the operator to start, but
    # because no auth is required for the openfga API this value will be
    # ignored by openfga
    openFgaApiTokenEnvVar: "fake"

# Traefik configuration
traefik:
  enabled: true
  providers:
    # Enable Kubernetes Gateway provider
    kubernetesGateway:
      enabled: true
    # Enable Kubernetes Ingress provider
    kubernetesIngress:
      enabled: true
    # Enable Kubernetes IngressRoute provider
    kubernetesCRD:
      enabled: true
  gateway:
    # Disable Traefik's default gateway since we manage it explicitly
    enabled: false
  logs:
    # Enable access logs
    access:
      enabled: true

# Gateway configuration
gateway:
  enabled: true

  # Gateway listeners
  listeners:
    traefik:
      port: 8080
      protocol: HTTP
      allowedRoutes:
        namespaces:
          from: Same
    web:
      port: 8000
      protocol: HTTP
      allowedRoutes:
        namespaces:
          from: Same


# OpenFGA configuration
openfga:
  enabled: true

  # Enable reloader to restart pods when ConfigMap or Secrets change
  podAnnotations:
    reloader.stakater.com/auto: "true"

  # Disable playground by default
  playground:
    enabled: false

  # Use PostgreSQL
  datastore:
    engine: postgres
    # Must override uriSecret if setting postgresql.enabled to false.
    uriSecret: openfga-postgresql-client
    migrationType: initContainer

  # PostgreSQL subchart configuration
  postgresql:
    enabled: true
    auth:
      username: openfga
      database: openfga
      existingSecret: openfga-postgresql-server

  # Additional OpenFGA configuration
  replicaCount: 1

# Heimdall configuration
heimdall:
  enabled: true

  image:
    tag: 0.16.6


  deployment:
    replicaCount: 1
    autoscaling:
      enabled: false
    labels:
      openfga-store: "lfx-core"
    volumes:
      - name: heimdall-signer-cert
        secret:
          secretName: heimdall-signer-cert
    volumeMounts:
      - name: heimdall-signer-cert
        mountPath: "/heimdall/cert/"
    # Enable reloader to restart pods when ConfigMap or Secrets change
    annotations:
      reloader.stakater.com/auto: "true"

  env:
    CLIENT_SECRET:
      secretKeyRef:
        name: authelia-clients
        key: heimdall

  log:
    format: gelf
    level: info

  providers:
    kubernetes: {}

  serve:
    trusted_proxies:
      - 192.168.0.0/16

  mechanisms:
    authenticators:
      - id: anonymous_authenticator
        type: anonymous
        config:
          subject: "_anonymous"
      - id: oidc
        type: oauth2_introspection
        config:
          metadata_endpoint:
            url: http://auth.k8s.orb.local/.well-known/oauth-authorization-server
            resolved_endpoints:
              introspection_endpoint:
                auth:
                  type: basic_auth
                  config:
                    user: heimdall
                    password: ${CLIENT_SECRET}
          assertions:
            audience:
              - "http://lfx-api.k8s.orb.local/"
          subject:
            # Authelia doesn't provide a "sub" claim for client_credentials token
            # introspection. Use a GJSON query to extract either the username or
            # the client_id. Client IDs can collide with usernames (and GJSON
            # doesn't let us do array concatenation to add a literal prefix), so
            # the `sub` claim should NOT be used downstream.
            id: '[username,client_id].0'
    contextualizers:
      - id: oidc_contextualizer
        type: generic
        config:
          endpoint:
            url: http://auth.k8s.orb.local/api/oidc/userinfo
            method: GET
          forward_headers:
            - Authorization
          # Continuing on error is needed if this contextualizer is used in any
          # rulesets that support anonymous access.
          continue_pipeline_on_error: true
    authorizers:
      - id: allow_all
        type: allow
      - id: deny_all
        type: deny
      - id: json_content_type
        type: cel
        config:
          expressions:
            - expression: |
                Request.Header("Content-Type") == "application/json"
              message: "Content-Type must be application/json"
      - id: openfga_check
        type: remote
        config:
          endpoint: "http://lfx-platform-openfga:8080/stores/${OPENFGA_STORE_ID}/check"
          values:
            model_id: ${OPENFGA_AUTH_MODEL_ID}
          payload: |
            {
              "authorization_model_id": "{{ .Values.model_id }}",
              "tuple_key": {
                "user": {{
                  list
                    "user:"
                    (
                      eq .Subject.ID "_anonymous"
                      | ternary
                        "_anonymous"
                        (or
                          .Subject.Attributes.username
                          (list "clients@" .Subject.Attributes.client_id | join ""))
                    )
                  | join "" | quote
                }},
                "relation": "{{ .Values.relation }}",
                "object": "{{ .Values.object }}"
              }
            }
          expressions:
            - expression: |
                Payload.allowed == true
    finalizers:
      - id: create_jwt
        type: jwt
        config:
          signer:
            key_store:
              path: /heimdall/cert/signer.pem
          claims: |
                    {
                      "principal": {{
                        eq .Subject.ID "_anonymous"
                        | ternary
                          "_anonymous"
                          (or
                            .Subject.Attributes.username
                            (list "clients@" .Subject.Attributes.client_id | join ""))
                        | quote
                      }}
                      {{ if .Outputs.oidc_contextualizer.email -}},
                      "email": {{ quote .Outputs.oidc_contextualizer.email }}
                      {{ end -}}
                      {{ if .Values.aud -}},
                      "aud": {{ quote .Values.aud }}
                      {{ end -}}
                    }

  default_rule:
    execute:
      - authenticator: oidc
      - contextualizer: oidc_contextualizer
      - authorizer: deny_all
      - finalizer: create_jwt

  extraArgs:
    - "--insecure"

# NATS configuration
nats:
  enabled: true
  config:
    cluster:
      enabled: true
      replicas: 3

    # NATS Box for management operations
    natsBox:
      enabled: true

    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"

    # JetStream configuration
    jetstream:
      enabled: true
      fileStore:
        enabled: true
        size: 1Gi

# OpenSearch configuration
opensearch:
  enabled: true
  singleNode: true
  extraEnvs:
    - name: DISABLE_INSTALL_DEMO_CONFIG
      value: "true"
    - name: DISABLE_SECURITY_PLUGIN
      value: "true"

# Mailpit configuration
mailpit:
  enabled: true

# Authelia configuration
authelia:
  enabled: true
  ingress:
    enabled: true
  secret:
    additionalSecrets:
      authelia-jwks-keys: {}
      authelia-clients-hashed: {}
  persistence:
    enabled: true
  pod:
    extraVolumes:
      - name: authelia-users
        configMap:
          name: authelia-users
          items:
            - key: users_database.yml
              path: users_database.yml
    extraVolumeMounts:
      - name: authelia-users
        mountPath: /config-users
  configMap:
    log:
      format: json
    session:
      cookies:
        - domain: k8s.orb.local
          subdomain: auth
    totp:
      disable: true
    webauthn:
      disable: true
    authentication_backend:
      file:
        enabled: true
        path: /config-users/users_database.yml
    access_control:
      default_policy: one_factor
    storage:
      local:
        enabled: true
    notifier:
      smtp:
        enabled: true
        address: "smtp://lfx-platform-mailpit-smtp:25"
        username: ""
        password:
          disabled: true
        disable_require_tls: true
    identity_providers:
      oidc:
        lifespans: {}
        cors: {}
        enabled: true
        jwks:
          - key_id: "1"
            algorithm: "RS256"
            key:
              path: /secrets/authelia-jwks-keys/jwks-key-1.pem
        clients:
          - client_id: heimdall
            client_name: Heimdall backend
            client_secret:
              path: /secrets/authelia-clients-hashed/heimdall
            public: false
            scopes:
              - none
            grant_types:
              - client_credentials
            authorization_policy: one_factor
            token_endpoint_auth_method: client_secret_basic
          - client_id: m2m_test
            client_name: M2M Test Client
            client_secret:
              path: /secrets/authelia-clients-hashed/m2m_test
            public: false
            scopes:
              - none
            audience:
              - "http://lfx-api.k8s.orb.local"
            grant_types:
              - client_credentials
            authorization_policy: one_factor
            token_endpoint_auth_method: client_secret_basic
          - client_id: token_helper
            client_name: Token Helper CLI
            public: true
            redirect_uris:
              - "http://localhost:55001/callback"
            scopes:
              - openid
              - email
              - profile
              - offline_access
            audience:
              - "http://lfx-api.k8s.orb.local"
            grant_types:
              - authorization_code
              - refresh_token
            authorization_policy: one_factor
          - client_id: lfx
            client_name: LFX Client Credentials
            client_secret:
              path: /secrets/authelia-clients-hashed/lfx
            public: false
            redirect_uris:
              - "http://localhost:4200/callback"
            scopes:
              - openid
              - email
              - profile
              - offline_access
              - access:api
              - update:current_user_metadata
              - read:current_user
            audience:
              - "http://lfx-api.k8s.orb.local"
            grant_types:
              - authorization_code
              - refresh_token
            authorization_policy: one_factor
            token_endpoint_auth_method: client_secret_basic
          - client_id: docs
            client_name: LFX Swagger UI Docs
            public: true
            redirect_uris:
              - "http://lfx-api.k8s.orb.local/docs/oauth2-redirect.html"
              - "https://lfx-api.k8s.orb.local/docs/oauth2-redirect.html"
            scopes:
              - openid
              - email
              - profile
              - api:access
            audience:
              - "http://lfx-api.k8s.orb.local"
            grant_types:
              - implicit
            authorization_policy: one_factor
            response_types:
              - code
              - id_token
              - token

authelia_generate_jwks:
  enabled: true

authelia_client_generation:
  enabled: true
  clients:
    - heimdall
    - m2m_test
    - lfx

authelia_user_generation:
  enabled: true
  users:
    - project_super_admin
    - project_admin_1
    - project_admin_2
    - committee_member_1
    - committee_member_2

nack:
  enabled: true
  jetstream:
    nats:
      url: nats://lfx-platform-nats:4222
    additionalArgs: [--control-loop]

cert-manager:
  enabled: false
  crds:
    enabled: true
trustManagerEnabled: false
trust-manager:
  crds:
    enabled: true
  namespace: cert-manager

lfx-v2-fga-sync:
  enabled: true
  lfx:
    domain: k8s.orb.local

lfx-v2-access-check:
  enabled: true
  lfx:
    domain: k8s.orb.local

lfx-v2-indexer-service:
  enabled: true
  lfx:
    domain: k8s.orb.local

lfx-v2-query-service:
  enabled: true
  lfx:
    domain: k8s.orb.local
  authelia:
    enabled: true
  heimdall:
    enabled: true
  app:
    environment:
      # Organization search is configured to use a mock implementation.
      # To use Clearbit instead, change ORG_SEARCH_SOURCE to 'clearbit' and
      # set your actual Clearbit API credential in CLEARBIT_CREDENTIAL.
      ORG_SEARCH_SOURCE:
        value: mock
      CLEARBIT_CREDENTIAL:
        value: ""

lfx-v2-project-service:
  enabled: true
  lfx:
    domain: k8s.orb.local

lfx-v2-committee-service:
  enabled: true
  lfx:
    domain: k8s.orb.local

lfx-v2-meeting-service:
  enabled: true
  lfx:
    domain: k8s.orb.local

lfx-v2-auth-service:
  enabled: true
  lfx:
    domain: k8s.orb.local
  app:
    environment:
      # Repository type for user management
      # It can be authelia, auth0 or mock
      # In case of auth0, please refer to the following documentation
      ## https://github.com/linuxfoundation/lfx-v2-auth-service?tab=readme-ov-file#auth0-configuration
      USER_REPOSITORY_TYPE:
        value: mock
      # Authelia configuration
      ## Required when using "authelia" repository type
      ## For more information, see the [Local Development Support documentation](https://github.com/linuxfoundation/lfx-v2-auth-service/blob/main/README.md#local-development-support)
      AUTHELIA_CONFIGMAP_NAME:
        value: authelia-users
      AUTHELIA_CONFIGMAP_NAMESPACE:
        value: lfx
      AUTHELIA_DAEMONSET_NAME:
        value: lfx-platform-authelia
      AUTHELIA_SECRET_NAME:
        value: authelia-users
